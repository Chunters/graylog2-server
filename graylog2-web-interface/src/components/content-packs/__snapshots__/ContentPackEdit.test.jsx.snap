// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ContentPackEdit /> should render empty content pack for create 1`] = `
.c1.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c1.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c1.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c1.btn-danger[disabled],
.c1.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c1.btn-danger[disabled]:hover,
.c1.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c1.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c1.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c1.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c1.btn-default[disabled],
.c1.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c1.btn-default[disabled]:hover,
.c1.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c1.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c1.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c1.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c1.btn-info[disabled],
.c1.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c1.btn-info[disabled]:hover,
.c1.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c1.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c1.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c1.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c1.btn-link[disabled],
.c1.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c1.btn-link[disabled]:hover,
.c1.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c1.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c1.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c1.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c1.btn-primary[disabled],
.c1.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c1.btn-primary[disabled]:hover,
.c1.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c1.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c1.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c1.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c1.btn-success[disabled],
.c1.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c1.btn-success[disabled]:hover,
.c1.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c1.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c1.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c1.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c1.btn-warning[disabled],
.c1.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c1.btn-warning[disabled]:hover,
.c1.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2 {
  color: #1f1f1f;
  font-weight: bold;
  margin-bottom: 5px;
  display: inline-block;
}

.c3 {
  color: #1f1f1f;
  background-color: #fff;
  border-color: #cdcdcd;
}

.c3::-webkit-input-placeholder {
  color: #9b9b9b;
}

.c3::-moz-placeholder {
  color: #9b9b9b;
}

.c3:-ms-input-placeholder {
  color: #9b9b9b;
}

.c3::placeholder {
  color: #9b9b9b;
}

.c3:focus {
  border-color: #5890f1;
  box-shadow: inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(88,144,241,0.4);
}

.c3[disabled],
.c3[readonly],
fieldset[disabled] .c3 {
  background-color: #cdcdcd;
}

.c3 ~ .form-control-feedback.glyphicon {
  display: none;
}

.c4 {
  display: block;
  margin-top: 5px;
  margin-bottom: 10px;
  color: #838383;
}

.c0.nav > li > a:hover,
.c0.nav > li > a:focus {
  background-color: #e6e6e6;
}

.c0.nav > li.disabled > a {
  color: #9b9b9b;
}

.c0.nav > li.disabled > a:hover,
.c0.nav > li.disabled > a:focus {
  color: #9b9b9b;
}

.c0.nav .open > a,
.c0.nav .open > a:hover,
.c0.nav .open > a:focus {
  background-color: #e6e6e6;
  border-color: #702785;
}

.c0.nav.nav-pills > li.active > a,
.c0.nav.nav-pills > li.active > a:hover,
.c0.nav.nav-pills > li.active > a:focus {
  color: #fff;
  background-color: #702785;
}

.c0.nav .nav-tabs {
  border-bottom-color: rgb(198,207,231);
}

.c0.nav .nav-tabs > li > a {
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
  color: #1f1f1f;
  border-color: #cdcdcd #cdcdcd rgb(198,207,231);
}

.c0.nav .nav-tabs > li > a:hover {
  background-color: #cdcdcd;
  color: rgb(46,46,46);
}

.c0.nav .nav-tabs > li.active > a,
.c0.nav .nav-tabs > li.active > a:hover,
.c0.nav .nav-tabs > li.active > a:focus {
  color: #1f1f1f;
  background-color: #ffffff;
  border-color: rgb(198,207,231);
  border-bottom-color: transparent;
}

.c0.nav .nav-tabs > li.disabled > a,
.c0.nav .nav-tabs > li.disabled > a:hover,
.c0.nav .nav-tabs > li.disabled > a:focus {
  color: #9b9b9b;
  background-color: #ffffff;
  border-color: #ffffff #ffffff rgb(198,207,231);
  cursor: not-allowed;
}

.c0.nav.nav-justified > .active > a,
.c0.nav.nav-justified > .active > a:hover,
.c0.nav.nav-justified > .active > a:focus {
  border-color: rgb(198,207,231);
}

@media (min-width:768px) {
  .c0.nav.nav-justified > li > a {
    border-bottom-color: rgb(198,207,231);
  }

  .c0.nav.nav-justified > .active > a,
  .c0.nav.nav-justified > .active > a:hover,
  .c0.nav.nav-justified > .active > a:focus {
    border-bottom-color: #ffffff;
  }
}

<ContentPackEdit
  appliedParameter={Object {}}
  contentPack={
    Object {
      "description": "",
      "entities": Array [],
      "id": "9950ba5a-0887-40a9-2b8f-8b50292cc7fb",
      "name": "",
      "parameters": Array [],
      "rev": 1,
      "summary": "",
      "url": "",
      "v": 1,
      "vendor": "",
    }
  }
  edit={false}
  entityIndex={Object {}}
  fetchedEntities={Array []}
  onGetEntities={[Function]}
  onSave={[Function]}
  onStateChange={[Function]}
  selectedEntities={Object {}}
>
  <div>
    <Wizard
      NavigationComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "STYLES": Array [
            "tabs",
            "pills",
          ],
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "Nav-dzawzr-0",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              [Function],
            ],
          },
          "displayName": "Nav",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "Nav-dzawzr-0",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      affixed={true}
      containerClassName="content"
      hidePreviousNextButtons={false}
      horizontal={false}
      justified={false}
      onStepChange={[Function]}
      steps={
        Array [
          Object {
            "component": <ContentPackSelection
              contentPack={
                Object {
                  "description": "",
                  "entities": Array [],
                  "id": "9950ba5a-0887-40a9-2b8f-8b50292cc7fb",
                  "name": "",
                  "parameters": Array [],
                  "rev": 1,
                  "summary": "",
                  "url": "",
                  "v": 1,
                  "vendor": "",
                }
              }
              edit={false}
              entities={Object {}}
              onStateChange={[Function]}
              selectedEntities={Object {}}
            />,
            "key": "selection",
            "title": "Content Selection",
          },
          Object {
            "component": <ContentPackParameters
              appliedParameter={Object {}}
              contentPack={
                Object {
                  "description": "",
                  "entities": Array [],
                  "id": "9950ba5a-0887-40a9-2b8f-8b50292cc7fb",
                  "name": "",
                  "parameters": Array [],
                  "rev": 1,
                  "summary": "",
                  "url": "",
                  "v": 1,
                  "vendor": "",
                }
              }
              onStateChange={[Function]}
            />,
            "disabled": true,
            "key": "parameters",
            "title": "Parameters",
          },
          Object {
            "component": <ContentPackPreview
              contentPack={
                Object {
                  "description": "",
                  "entities": Array [],
                  "id": "9950ba5a-0887-40a9-2b8f-8b50292cc7fb",
                  "name": "",
                  "parameters": Array [],
                  "rev": 1,
                  "summary": "",
                  "url": "",
                  "v": 1,
                  "vendor": "",
                }
              }
              onSave={[Function]}
            />,
            "disabled": true,
            "key": "preview",
            "title": "Preview",
          },
        ]
      }
    >
      <Row
        bsClass="row"
        className="content"
        componentClass="div"
      >
        <div
          className="content row"
        >
          <Col
            bsClass="col"
            className="subnavigation"
            componentClass="div"
            md={2}
          >
            <div
              className="subnavigation col-md-2"
            >
              <Nav
                activeKey="selection"
                bsStyle="pills"
                justified={false}
                onSelect={[Function]}
                stacked={true}
              >
                <StyledComponent
                  activeKey="selection"
                  bsStyle="pills"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "STYLES": Array [
                        "tabs",
                        "pills",
                      ],
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Nav-dzawzr-0",
                        "isStatic": false,
                        "lastClassName": "c0",
                        "rules": Array [
                          [Function],
                        ],
                      },
                      "displayName": "Nav",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Nav-dzawzr-0",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  justified={false}
                  onSelect={[Function]}
                  stacked={true}
                >
                  <Nav
                    activeKey="selection"
                    bsClass="nav"
                    bsStyle="pills"
                    className="c0"
                    justified={false}
                    onSelect={[Function]}
                    pullLeft={false}
                    pullRight={false}
                    stacked={true}
                  >
                    <ul
                      className="c0 nav nav-pills nav-stacked"
                      role={null}
                    >
                      <NavItem
                        active={true}
                        activeKey="selection"
                        disabled={false}
                        eventKey="selection"
                        key=".$selection"
                        onSelect={[Function]}
                      >
                        <li
                          className="active"
                          role="presentation"
                        >
                          <SafeAnchor
                            componentClass="a"
                            disabled={false}
                            onClick={[Function]}
                          >
                            <a
                              href="#"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              role="button"
                            >
                              Content Selection
                            </a>
                          </SafeAnchor>
                        </li>
                      </NavItem>
                      <NavItem
                        active={false}
                        activeKey="selection"
                        disabled={true}
                        eventKey="parameters"
                        key=".$parameters"
                        onSelect={[Function]}
                      >
                        <li
                          className="disabled"
                          role="presentation"
                        >
                          <SafeAnchor
                            componentClass="a"
                            disabled={true}
                            onClick={[Function]}
                          >
                            <a
                              href="#"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              role="button"
                              style={
                                Object {
                                  "pointerEvents": "none",
                                }
                              }
                              tabIndex={-1}
                            >
                              Parameters
                            </a>
                          </SafeAnchor>
                        </li>
                      </NavItem>
                      <NavItem
                        active={false}
                        activeKey="selection"
                        disabled={true}
                        eventKey="preview"
                        key=".$preview"
                        onSelect={[Function]}
                      >
                        <li
                          className="disabled"
                          role="presentation"
                        >
                          <SafeAnchor
                            componentClass="a"
                            disabled={true}
                            onClick={[Function]}
                          >
                            <a
                              href="#"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              role="button"
                              style={
                                Object {
                                  "pointerEvents": "none",
                                }
                              }
                              tabIndex={-1}
                            >
                              Preview
                            </a>
                          </SafeAnchor>
                        </li>
                      </NavItem>
                    </ul>
                  </Nav>
                </StyledComponent>
              </Nav>
              <br />
              <Row
                bsClass="row"
                componentClass="div"
              >
                <div
                  className="row"
                >
                  <Col
                    bsClass="col"
                    componentClass="div"
                    xs={6}
                  >
                    <div
                      className="col-xs-6"
                    >
                      <ForwardRef
                        bsSize="small"
                        bsStyle="info"
                        disabled={true}
                        onClick={[Function]}
                      >
                        <Button__StyledButton
                          bsSize="small"
                          bsStyle="info"
                          disabled={true}
                          onClick={[Function]}
                        >
                          <StyledComponent
                            bsSize="small"
                            bsStyle="info"
                            disabled={true}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "SIZES": Array [
                                  "large",
                                  "small",
                                  "xsmall",
                                ],
                                "STYLES": Array [
                                  "success",
                                  "warning",
                                  "danger",
                                  "info",
                                  "default",
                                  "primary",
                                  "link",
                                ],
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "Button__StyledButton-c9cbmb-0",
                                  "isStatic": false,
                                  "lastClassName": "c1",
                                  "rules": Array [
                                    [Function],
                                  ],
                                },
                                "displayName": "Button__StyledButton",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onClick={[Function]}
                          >
                            <Button
                              active={false}
                              block={false}
                              bsClass="btn"
                              bsSize="small"
                              bsStyle="info"
                              className="c1"
                              disabled={true}
                              onClick={[Function]}
                            >
                              <button
                                className="c1 btn btn-sm btn-info"
                                disabled={true}
                                onClick={[Function]}
                                type="button"
                              >
                                Previous
                              </button>
                            </Button>
                          </StyledComponent>
                        </Button__StyledButton>
                      </ForwardRef>
                    </div>
                  </Col>
                  <Col
                    bsClass="col"
                    className="text-right"
                    componentClass="div"
                    xs={6}
                  >
                    <div
                      className="text-right col-xs-6"
                    >
                      <ForwardRef
                        bsSize="small"
                        bsStyle="info"
                        disabled={true}
                        onClick={[Function]}
                      >
                        <Button__StyledButton
                          bsSize="small"
                          bsStyle="info"
                          disabled={true}
                          onClick={[Function]}
                        >
                          <StyledComponent
                            bsSize="small"
                            bsStyle="info"
                            disabled={true}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "SIZES": Array [
                                  "large",
                                  "small",
                                  "xsmall",
                                ],
                                "STYLES": Array [
                                  "success",
                                  "warning",
                                  "danger",
                                  "info",
                                  "default",
                                  "primary",
                                  "link",
                                ],
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "Button__StyledButton-c9cbmb-0",
                                  "isStatic": false,
                                  "lastClassName": "c1",
                                  "rules": Array [
                                    [Function],
                                  ],
                                },
                                "displayName": "Button__StyledButton",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onClick={[Function]}
                          >
                            <Button
                              active={false}
                              block={false}
                              bsClass="btn"
                              bsSize="small"
                              bsStyle="info"
                              className="c1"
                              disabled={true}
                              onClick={[Function]}
                            >
                              <button
                                className="c1 btn btn-sm btn-info"
                                disabled={true}
                                onClick={[Function]}
                                type="button"
                              >
                                Next
                              </button>
                            </Button>
                          </StyledComponent>
                        </Button__StyledButton>
                      </ForwardRef>
                    </div>
                  </Col>
                </div>
              </Row>
            </div>
          </Col>
          <Col
            bsClass="col"
            componentClass="div"
            md={7}
          >
            <div
              className="col-md-7"
            >
              <ContentPackSelection
                contentPack={
                  Object {
                    "description": "",
                    "entities": Array [],
                    "id": "9950ba5a-0887-40a9-2b8f-8b50292cc7fb",
                    "name": "",
                    "parameters": Array [],
                    "rev": 1,
                    "summary": "",
                    "url": "",
                    "v": 1,
                    "vendor": "",
                  }
                }
                edit={false}
                entities={Object {}}
                onStateChange={[Function]}
                selectedEntities={Object {}}
              >
                <div>
                  <Row
                    bsClass="row"
                    componentClass="div"
                  >
                    <div
                      className="row"
                    >
                      <Col
                        bsClass="col"
                        componentClass="div"
                        lg={8}
                        smOffset={1}
                      >
                        <div
                          className="col-lg-8 col-sm-offset-1"
                        >
                          <h2>
                            General Information
                          </h2>
                          <br />
                          <form
                            className="content-selection-form"
                            id="content-selection-form"
                            onSubmit={[Function]}
                          >
                            <fieldset>
                              <Input
                                addonAfter={null}
                                bsStyle={null}
                                buttonAfter={null}
                                help="Required. Give a descriptive name for this content pack."
                                id="name"
                                label="Name"
                                maxLength={250}
                                name="name"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="text"
                                value=""
                              >
                                <Component
                                  controlId="name"
                                  validationState={null}
                                >
                                  <FormGroup__StyledFormGroup
                                    controlId="name"
                                    validationState={null}
                                  >
                                    <StyledComponent
                                      controlId="name"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "SIZES": Array [
                                            "large",
                                            "small",
                                          ],
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                                            "isStatic": false,
                                            "lastClassName": "ekazNr",
                                            "rules": Array [
                                              [Function],
                                              ";",
                                            ],
                                          },
                                          "displayName": "FormGroup__StyledFormGroup",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      validationState={null}
                                    >
                                      <FormGroup
                                        bsClass="form-group"
                                        className=""
                                        controlId="name"
                                        validationState={null}
                                      >
                                        <div
                                          className="form-group"
                                        >
                                          <ControlLabel>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                                    "isStatic": false,
                                                    "lastClassName": "c2",
                                                    "rules": Array [
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "ControlLabel",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                                  "target": [Function],
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <ControlLabel
                                                bsClass="control-label"
                                                className="c2"
                                                srOnly={false}
                                              >
                                                <label
                                                  className="c2 control-label"
                                                  htmlFor="name"
                                                >
                                                  Name
                                                </label>
                                              </ControlLabel>
                                            </StyledComponent>
                                          </ControlLabel>
                                          <InputWrapper>
                                            <span>
                                              <FormControl
                                                componentClass="input"
                                                inputRef={[Function]}
                                                label="Name"
                                                maxLength={250}
                                                name="name"
                                                onChange={[Function]}
                                                placeholder=""
                                                required={true}
                                                type="text"
                                                value=""
                                              >
                                                <StyledComponent
                                                  componentClass="input"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "Feedback": [Function],
                                                      "SIZES": Array [
                                                        "small",
                                                        "large",
                                                      ],
                                                      "Static": [Function],
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "FormControl-sc-1amoaox-0",
                                                        "isStatic": false,
                                                        "lastClassName": "c3",
                                                        "rules": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "displayName": "FormControl",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  inputRef={[Function]}
                                                  label="Name"
                                                  maxLength={250}
                                                  name="name"
                                                  onChange={[Function]}
                                                  placeholder=""
                                                  required={true}
                                                  type="text"
                                                  value=""
                                                >
                                                  <FormControl
                                                    bsClass="form-control"
                                                    className="c3"
                                                    componentClass="input"
                                                    inputRef={[Function]}
                                                    label="Name"
                                                    maxLength={250}
                                                    name="name"
                                                    onChange={[Function]}
                                                    placeholder=""
                                                    required={true}
                                                    type="text"
                                                    value=""
                                                  >
                                                    <input
                                                      className="c3 form-control"
                                                      id="name"
                                                      label="Name"
                                                      maxLength={250}
                                                      name="name"
                                                      onChange={[Function]}
                                                      placeholder=""
                                                      required={true}
                                                      type="text"
                                                      value=""
                                                    />
                                                  </FormControl>
                                                </StyledComponent>
                                              </FormControl>
                                              <HelpBlock>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "HelpBlock-i8is92-0",
                                                        "isStatic": false,
                                                        "lastClassName": "c4",
                                                        "rules": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "displayName": "HelpBlock",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "HelpBlock-i8is92-0",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <HelpBlock
                                                    bsClass="help-block"
                                                    className="c4"
                                                  >
                                                    <span
                                                      className="c4 help-block"
                                                    >
                                                      Required. Give a descriptive name for this content pack.
                                                    </span>
                                                  </HelpBlock>
                                                </StyledComponent>
                                              </HelpBlock>
                                            </span>
                                          </InputWrapper>
                                        </div>
                                      </FormGroup>
                                    </StyledComponent>
                                  </FormGroup__StyledFormGroup>
                                </Component>
                              </Input>
                              <Input
                                addonAfter={null}
                                bsStyle={null}
                                buttonAfter={null}
                                help="Required. Give a short summary of the content pack."
                                id="summary"
                                label="Summary"
                                maxLength={250}
                                name="summary"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="text"
                                value=""
                              >
                                <Component
                                  controlId="summary"
                                  validationState={null}
                                >
                                  <FormGroup__StyledFormGroup
                                    controlId="summary"
                                    validationState={null}
                                  >
                                    <StyledComponent
                                      controlId="summary"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "SIZES": Array [
                                            "large",
                                            "small",
                                          ],
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                                            "isStatic": false,
                                            "lastClassName": "ekazNr",
                                            "rules": Array [
                                              [Function],
                                              ";",
                                            ],
                                          },
                                          "displayName": "FormGroup__StyledFormGroup",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      validationState={null}
                                    >
                                      <FormGroup
                                        bsClass="form-group"
                                        className=""
                                        controlId="summary"
                                        validationState={null}
                                      >
                                        <div
                                          className="form-group"
                                        >
                                          <ControlLabel>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                                    "isStatic": false,
                                                    "lastClassName": "c2",
                                                    "rules": Array [
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "ControlLabel",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                                  "target": [Function],
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <ControlLabel
                                                bsClass="control-label"
                                                className="c2"
                                                srOnly={false}
                                              >
                                                <label
                                                  className="c2 control-label"
                                                  htmlFor="summary"
                                                >
                                                  Summary
                                                </label>
                                              </ControlLabel>
                                            </StyledComponent>
                                          </ControlLabel>
                                          <InputWrapper>
                                            <span>
                                              <FormControl
                                                componentClass="input"
                                                inputRef={[Function]}
                                                label="Summary"
                                                maxLength={250}
                                                name="summary"
                                                onChange={[Function]}
                                                placeholder=""
                                                required={true}
                                                type="text"
                                                value=""
                                              >
                                                <StyledComponent
                                                  componentClass="input"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "Feedback": [Function],
                                                      "SIZES": Array [
                                                        "small",
                                                        "large",
                                                      ],
                                                      "Static": [Function],
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "FormControl-sc-1amoaox-0",
                                                        "isStatic": false,
                                                        "lastClassName": "c3",
                                                        "rules": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "displayName": "FormControl",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  inputRef={[Function]}
                                                  label="Summary"
                                                  maxLength={250}
                                                  name="summary"
                                                  onChange={[Function]}
                                                  placeholder=""
                                                  required={true}
                                                  type="text"
                                                  value=""
                                                >
                                                  <FormControl
                                                    bsClass="form-control"
                                                    className="c3"
                                                    componentClass="input"
                                                    inputRef={[Function]}
                                                    label="Summary"
                                                    maxLength={250}
                                                    name="summary"
                                                    onChange={[Function]}
                                                    placeholder=""
                                                    required={true}
                                                    type="text"
                                                    value=""
                                                  >
                                                    <input
                                                      className="c3 form-control"
                                                      id="summary"
                                                      label="Summary"
                                                      maxLength={250}
                                                      name="summary"
                                                      onChange={[Function]}
                                                      placeholder=""
                                                      required={true}
                                                      type="text"
                                                      value=""
                                                    />
                                                  </FormControl>
                                                </StyledComponent>
                                              </FormControl>
                                              <HelpBlock>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "HelpBlock-i8is92-0",
                                                        "isStatic": false,
                                                        "lastClassName": "c4",
                                                        "rules": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "displayName": "HelpBlock",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "HelpBlock-i8is92-0",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <HelpBlock
                                                    bsClass="help-block"
                                                    className="c4"
                                                  >
                                                    <span
                                                      className="c4 help-block"
                                                    >
                                                      Required. Give a short summary of the content pack.
                                                    </span>
                                                  </HelpBlock>
                                                </StyledComponent>
                                              </HelpBlock>
                                            </span>
                                          </InputWrapper>
                                        </div>
                                      </FormGroup>
                                    </StyledComponent>
                                  </FormGroup__StyledFormGroup>
                                </Component>
                              </Input>
                              <Input
                                addonAfter={null}
                                bsStyle={null}
                                buttonAfter={null}
                                help="Give a long description of the content pack in markdown."
                                id="description"
                                label="Description"
                                name="description"
                                onChange={[Function]}
                                placeholder=""
                                rows={6}
                                type="textarea"
                                value=""
                              >
                                <Component
                                  controlId="description"
                                  validationState={null}
                                >
                                  <FormGroup__StyledFormGroup
                                    controlId="description"
                                    validationState={null}
                                  >
                                    <StyledComponent
                                      controlId="description"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "SIZES": Array [
                                            "large",
                                            "small",
                                          ],
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                                            "isStatic": false,
                                            "lastClassName": "ekazNr",
                                            "rules": Array [
                                              [Function],
                                              ";",
                                            ],
                                          },
                                          "displayName": "FormGroup__StyledFormGroup",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      validationState={null}
                                    >
                                      <FormGroup
                                        bsClass="form-group"
                                        className=""
                                        controlId="description"
                                        validationState={null}
                                      >
                                        <div
                                          className="form-group"
                                        >
                                          <ControlLabel>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                                    "isStatic": false,
                                                    "lastClassName": "c2",
                                                    "rules": Array [
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "ControlLabel",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                                  "target": [Function],
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <ControlLabel
                                                bsClass="control-label"
                                                className="c2"
                                                srOnly={false}
                                              >
                                                <label
                                                  className="c2 control-label"
                                                  htmlFor="description"
                                                >
                                                  Description
                                                </label>
                                              </ControlLabel>
                                            </StyledComponent>
                                          </ControlLabel>
                                          <InputWrapper>
                                            <span>
                                              <FormControl
                                                componentClass="textarea"
                                                inputRef={[Function]}
                                                label="Description"
                                                name="description"
                                                onChange={[Function]}
                                                placeholder=""
                                                rows={6}
                                                type="textarea"
                                                value=""
                                              >
                                                <StyledComponent
                                                  componentClass="textarea"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "Feedback": [Function],
                                                      "SIZES": Array [
                                                        "small",
                                                        "large",
                                                      ],
                                                      "Static": [Function],
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "FormControl-sc-1amoaox-0",
                                                        "isStatic": false,
                                                        "lastClassName": "c3",
                                                        "rules": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "displayName": "FormControl",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  inputRef={[Function]}
                                                  label="Description"
                                                  name="description"
                                                  onChange={[Function]}
                                                  placeholder=""
                                                  rows={6}
                                                  type="textarea"
                                                  value=""
                                                >
                                                  <FormControl
                                                    bsClass="form-control"
                                                    className="c3"
                                                    componentClass="textarea"
                                                    inputRef={[Function]}
                                                    label="Description"
                                                    name="description"
                                                    onChange={[Function]}
                                                    placeholder=""
                                                    rows={6}
                                                    type="textarea"
                                                    value=""
                                                  >
                                                    <textarea
                                                      className="c3 form-control"
                                                      id="description"
                                                      label="Description"
                                                      name="description"
                                                      onChange={[Function]}
                                                      placeholder=""
                                                      rows={6}
                                                      type="textarea"
                                                      value=""
                                                    />
                                                  </FormControl>
                                                </StyledComponent>
                                              </FormControl>
                                              <HelpBlock>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "HelpBlock-i8is92-0",
                                                        "isStatic": false,
                                                        "lastClassName": "c4",
                                                        "rules": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "displayName": "HelpBlock",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "HelpBlock-i8is92-0",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <HelpBlock
                                                    bsClass="help-block"
                                                    className="c4"
                                                  >
                                                    <span
                                                      className="c4 help-block"
                                                    >
                                                      Give a long description of the content pack in markdown.
                                                    </span>
                                                  </HelpBlock>
                                                </StyledComponent>
                                              </HelpBlock>
                                            </span>
                                          </InputWrapper>
                                        </div>
                                      </FormGroup>
                                    </StyledComponent>
                                  </FormGroup__StyledFormGroup>
                                </Component>
                              </Input>
                              <Input
                                addonAfter={null}
                                bsStyle={null}
                                buttonAfter={null}
                                help="Required. Who did this content pack and how can they be reached, e.g. Name and email."
                                id="vendor"
                                label="Vendor"
                                maxLength={250}
                                name="vendor"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="text"
                                value=""
                              >
                                <Component
                                  controlId="vendor"
                                  validationState={null}
                                >
                                  <FormGroup__StyledFormGroup
                                    controlId="vendor"
                                    validationState={null}
                                  >
                                    <StyledComponent
                                      controlId="vendor"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "SIZES": Array [
                                            "large",
                                            "small",
                                          ],
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                                            "isStatic": false,
                                            "lastClassName": "ekazNr",
                                            "rules": Array [
                                              [Function],
                                              ";",
                                            ],
                                          },
                                          "displayName": "FormGroup__StyledFormGroup",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      validationState={null}
                                    >
                                      <FormGroup
                                        bsClass="form-group"
                                        className=""
                                        controlId="vendor"
                                        validationState={null}
                                      >
                                        <div
                                          className="form-group"
                                        >
                                          <ControlLabel>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                                    "isStatic": false,
                                                    "lastClassName": "c2",
                                                    "rules": Array [
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "ControlLabel",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                                  "target": [Function],
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <ControlLabel
                                                bsClass="control-label"
                                                className="c2"
                                                srOnly={false}
                                              >
                                                <label
                                                  className="c2 control-label"
                                                  htmlFor="vendor"
                                                >
                                                  Vendor
                                                </label>
                                              </ControlLabel>
                                            </StyledComponent>
                                          </ControlLabel>
                                          <InputWrapper>
                                            <span>
                                              <FormControl
                                                componentClass="input"
                                                inputRef={[Function]}
                                                label="Vendor"
                                                maxLength={250}
                                                name="vendor"
                                                onChange={[Function]}
                                                placeholder=""
                                                required={true}
                                                type="text"
                                                value=""
                                              >
                                                <StyledComponent
                                                  componentClass="input"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "Feedback": [Function],
                                                      "SIZES": Array [
                                                        "small",
                                                        "large",
                                                      ],
                                                      "Static": [Function],
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "FormControl-sc-1amoaox-0",
                                                        "isStatic": false,
                                                        "lastClassName": "c3",
                                                        "rules": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "displayName": "FormControl",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  inputRef={[Function]}
                                                  label="Vendor"
                                                  maxLength={250}
                                                  name="vendor"
                                                  onChange={[Function]}
                                                  placeholder=""
                                                  required={true}
                                                  type="text"
                                                  value=""
                                                >
                                                  <FormControl
                                                    bsClass="form-control"
                                                    className="c3"
                                                    componentClass="input"
                                                    inputRef={[Function]}
                                                    label="Vendor"
                                                    maxLength={250}
                                                    name="vendor"
                                                    onChange={[Function]}
                                                    placeholder=""
                                                    required={true}
                                                    type="text"
                                                    value=""
                                                  >
                                                    <input
                                                      className="c3 form-control"
                                                      id="vendor"
                                                      label="Vendor"
                                                      maxLength={250}
                                                      name="vendor"
                                                      onChange={[Function]}
                                                      placeholder=""
                                                      required={true}
                                                      type="text"
                                                      value=""
                                                    />
                                                  </FormControl>
                                                </StyledComponent>
                                              </FormControl>
                                              <HelpBlock>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "HelpBlock-i8is92-0",
                                                        "isStatic": false,
                                                        "lastClassName": "c4",
                                                        "rules": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "displayName": "HelpBlock",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "HelpBlock-i8is92-0",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <HelpBlock
                                                    bsClass="help-block"
                                                    className="c4"
                                                  >
                                                    <span
                                                      className="c4 help-block"
                                                    >
                                                      Required. Who did this content pack and how can they be reached, e.g. Name and email.
                                                    </span>
                                                  </HelpBlock>
                                                </StyledComponent>
                                              </HelpBlock>
                                            </span>
                                          </InputWrapper>
                                        </div>
                                      </FormGroup>
                                    </StyledComponent>
                                  </FormGroup__StyledFormGroup>
                                </Component>
                              </Input>
                              <Input
                                addonAfter={null}
                                bsStyle={null}
                                buttonAfter={null}
                                help="Where can I find the content pack. e.g. github url"
                                id="url"
                                label="URL"
                                maxLength={250}
                                name="url"
                                onChange={[Function]}
                                placeholder=""
                                type="text"
                                value=""
                              >
                                <Component
                                  controlId="url"
                                  validationState={null}
                                >
                                  <FormGroup__StyledFormGroup
                                    controlId="url"
                                    validationState={null}
                                  >
                                    <StyledComponent
                                      controlId="url"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "SIZES": Array [
                                            "large",
                                            "small",
                                          ],
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                                            "isStatic": false,
                                            "lastClassName": "ekazNr",
                                            "rules": Array [
                                              [Function],
                                              ";",
                                            ],
                                          },
                                          "displayName": "FormGroup__StyledFormGroup",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      validationState={null}
                                    >
                                      <FormGroup
                                        bsClass="form-group"
                                        className=""
                                        controlId="url"
                                        validationState={null}
                                      >
                                        <div
                                          className="form-group"
                                        >
                                          <ControlLabel>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                                    "isStatic": false,
                                                    "lastClassName": "c2",
                                                    "rules": Array [
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "ControlLabel",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                                  "target": [Function],
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <ControlLabel
                                                bsClass="control-label"
                                                className="c2"
                                                srOnly={false}
                                              >
                                                <label
                                                  className="c2 control-label"
                                                  htmlFor="url"
                                                >
                                                  URL
                                                </label>
                                              </ControlLabel>
                                            </StyledComponent>
                                          </ControlLabel>
                                          <InputWrapper>
                                            <span>
                                              <FormControl
                                                componentClass="input"
                                                inputRef={[Function]}
                                                label="URL"
                                                maxLength={250}
                                                name="url"
                                                onChange={[Function]}
                                                placeholder=""
                                                type="text"
                                                value=""
                                              >
                                                <StyledComponent
                                                  componentClass="input"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "Feedback": [Function],
                                                      "SIZES": Array [
                                                        "small",
                                                        "large",
                                                      ],
                                                      "Static": [Function],
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "FormControl-sc-1amoaox-0",
                                                        "isStatic": false,
                                                        "lastClassName": "c3",
                                                        "rules": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "displayName": "FormControl",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  inputRef={[Function]}
                                                  label="URL"
                                                  maxLength={250}
                                                  name="url"
                                                  onChange={[Function]}
                                                  placeholder=""
                                                  type="text"
                                                  value=""
                                                >
                                                  <FormControl
                                                    bsClass="form-control"
                                                    className="c3"
                                                    componentClass="input"
                                                    inputRef={[Function]}
                                                    label="URL"
                                                    maxLength={250}
                                                    name="url"
                                                    onChange={[Function]}
                                                    placeholder=""
                                                    type="text"
                                                    value=""
                                                  >
                                                    <input
                                                      className="c3 form-control"
                                                      id="url"
                                                      label="URL"
                                                      maxLength={250}
                                                      name="url"
                                                      onChange={[Function]}
                                                      placeholder=""
                                                      type="text"
                                                      value=""
                                                    />
                                                  </FormControl>
                                                </StyledComponent>
                                              </FormControl>
                                              <HelpBlock>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "HelpBlock-i8is92-0",
                                                        "isStatic": false,
                                                        "lastClassName": "c4",
                                                        "rules": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "displayName": "HelpBlock",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "HelpBlock-i8is92-0",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <HelpBlock
                                                    bsClass="help-block"
                                                    className="c4"
                                                  >
                                                    <span
                                                      className="c4 help-block"
                                                    >
                                                      Where can I find the content pack. e.g. github url
                                                    </span>
                                                  </HelpBlock>
                                                </StyledComponent>
                                              </HelpBlock>
                                            </span>
                                          </InputWrapper>
                                        </div>
                                      </FormGroup>
                                    </StyledComponent>
                                  </FormGroup__StyledFormGroup>
                                </Component>
                              </Input>
                            </fieldset>
                          </form>
                        </div>
                      </Col>
                    </div>
                  </Row>
                  <Row
                    bsClass="row"
                    componentClass="div"
                  >
                    <div
                      className="row"
                    >
                      <Col
                        bsClass="col"
                        componentClass="div"
                        lg={8}
                        smOffset={1}
                      >
                        <div
                          className="col-lg-8 col-sm-offset-1"
                        >
                          <h2>
                            Content Pack selection
                          </h2>
                        </div>
                      </Col>
                    </div>
                  </Row>
                  <Row
                    bsClass="row"
                    componentClass="div"
                  >
                    <div
                      className="row"
                    >
                      <Col
                        bsClass="col"
                        componentClass="div"
                        lg={8}
                        smOffset={1}
                      >
                        <div
                          className="col-lg-8 col-sm-offset-1"
                        >
                          <SearchForm
                            buttonLeftMargin={5}
                            id="filter-input"
                            label={null}
                            loadingLabel="Loading..."
                            onQueryChange={[Function]}
                            onReset={[Function]}
                            onSearch={[Function]}
                            placeholder="Enter search query..."
                            query=""
                            queryHelpComponent={null}
                            queryWidth="auto"
                            resetButtonLabel="Reset"
                            searchBsStyle="default"
                            searchButtonLabel="Filter"
                            topMargin={15}
                            useLoadingState={false}
                            wrapperClass="search"
                          >
                            <div
                              className="search"
                              style={
                                Object {
                                  "marginTop": 15,
                                }
                              }
                            >
                              <form
                                className="form-inline"
                                onSubmit={[Function]}
                              >
                                <div
                                  className="form-group has-feedback"
                                >
                                  <input
                                    autoComplete="off"
                                    className="query form-control"
                                    id="common-search-form-query-input"
                                    onChange={[Function]}
                                    placeholder="Enter search query..."
                                    spellCheck="false"
                                    style={
                                      Object {
                                        "width": "auto",
                                      }
                                    }
                                    type="text"
                                    value=""
                                  />
                                </div>
                                <div
                                  className="form-group"
                                  style={
                                    Object {
                                      "marginLeft": 5,
                                    }
                                  }
                                >
                                  <ForwardRef
                                    bsStyle="default"
                                    className="submit-button"
                                    disabled={false}
                                    type="submit"
                                  >
                                    <Button__StyledButton
                                      bsStyle="default"
                                      className="submit-button"
                                      disabled={false}
                                      type="submit"
                                    >
                                      <StyledComponent
                                        bsStyle="default"
                                        className="submit-button"
                                        disabled={false}
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "SIZES": Array [
                                              "large",
                                              "small",
                                              "xsmall",
                                            ],
                                            "STYLES": Array [
                                              "success",
                                              "warning",
                                              "danger",
                                              "info",
                                              "default",
                                              "primary",
                                              "link",
                                            ],
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "Button__StyledButton-c9cbmb-0",
                                              "isStatic": false,
                                              "lastClassName": "c1",
                                              "rules": Array [
                                                [Function],
                                              ],
                                            },
                                            "displayName": "Button__StyledButton",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                            "target": [Function],
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        type="submit"
                                      >
                                        <Button
                                          active={false}
                                          block={false}
                                          bsClass="btn"
                                          bsStyle="default"
                                          className="c1 submit-button"
                                          disabled={false}
                                          type="submit"
                                        >
                                          <button
                                            className="c1 submit-button btn btn-default"
                                            disabled={false}
                                            type="submit"
                                          >
                                            Filter
                                          </button>
                                        </Button>
                                      </StyledComponent>
                                    </Button__StyledButton>
                                  </ForwardRef>
                                </div>
                                <div
                                  className="form-group"
                                  style={
                                    Object {
                                      "marginLeft": 5,
                                    }
                                  }
                                >
                                  <ForwardRef
                                    bsStyle="default"
                                    className="reset-button"
                                    onClick={[Function]}
                                    type="reset"
                                  >
                                    <Button__StyledButton
                                      bsStyle="default"
                                      className="reset-button"
                                      onClick={[Function]}
                                      type="reset"
                                    >
                                      <StyledComponent
                                        bsStyle="default"
                                        className="reset-button"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "SIZES": Array [
                                              "large",
                                              "small",
                                              "xsmall",
                                            ],
                                            "STYLES": Array [
                                              "success",
                                              "warning",
                                              "danger",
                                              "info",
                                              "default",
                                              "primary",
                                              "link",
                                            ],
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "Button__StyledButton-c9cbmb-0",
                                              "isStatic": false,
                                              "lastClassName": "c1",
                                              "rules": Array [
                                                [Function],
                                              ],
                                            },
                                            "displayName": "Button__StyledButton",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                            "target": [Function],
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                        type="reset"
                                      >
                                        <Button
                                          active={false}
                                          block={false}
                                          bsClass="btn"
                                          bsStyle="default"
                                          className="c1 reset-button"
                                          disabled={false}
                                          onClick={[Function]}
                                          type="reset"
                                        >
                                          <button
                                            className="c1 reset-button btn btn-default"
                                            disabled={false}
                                            onClick={[Function]}
                                            type="reset"
                                          >
                                            Reset
                                          </button>
                                        </Button>
                                      </StyledComponent>
                                    </Button__StyledButton>
                                  </ForwardRef>
                                </div>
                              </form>
                            </div>
                          </SearchForm>
                        </div>
                      </Col>
                    </div>
                  </Row>
                  <Row
                    bsClass="row"
                    componentClass="div"
                  >
                    <div
                      className="row"
                    >
                      <Col
                        bsClass="col"
                        componentClass="div"
                        lg={8}
                        sm={8}
                        smOffset={1}
                      >
                        <div
                          className="col-lg-8 col-sm-8 col-sm-offset-1"
                        >
                          <ExpandableList>
                            <ul
                              className="list"
                            />
                          </ExpandableList>
                        </div>
                      </Col>
                    </div>
                  </Row>
                </div>
              </ContentPackSelection>
            </div>
          </Col>
          <Col
            bsClass="col"
            componentClass="div"
            md={3}
          >
            <div
              className="col-md-3"
            >
              <AutoAffix
                viewportOffsetTop={65}
              >
                <div>
                  <div>
                    <ContentPackDetails
                      constraints={Array []}
                      contentPack={
                        Object {
                          "description": "",
                          "entities": Array [],
                          "id": "9950ba5a-0887-40a9-2b8f-8b50292cc7fb",
                          "name": "",
                          "parameters": Array [],
                          "rev": 1,
                          "summary": "",
                          "url": "",
                          "v": 1,
                          "vendor": "",
                        }
                      }
                      offset={1}
                      showConstraints={false}
                      verbose={false}
                    >
                      <Row
                        bsClass="row"
                        componentClass="div"
                      >
                        <div
                          className="row"
                        >
                          <Col
                            bsClass="col"
                            componentClass="div"
                            sm={9}
                            smOffset={1}
                          >
                            <div
                              className="col-sm-9 col-sm-offset-1"
                            >
                              <div
                                id="content-pack-details"
                              >
                                <h2>
                                  Details
                                </h2>
                                <br />
                                <div>
                                  <dl
                                    className="deflist"
                                  >
                                    <dt>
                                      Version:
                                    </dt>
                                     
                                    <dd>
                                      1
                                    </dd>
                                    <dt>
                                      Name:
                                    </dt>
                                     
                                    <dd>
                                       
                                    </dd>
                                    <dt>
                                      Summary:
                                    </dt>
                                     
                                    <dd>
                                       
                                    </dd>
                                    <dt>
                                      Vendor:
                                    </dt>
                                     
                                    <dd>
                                       
                                    </dd>
                                    <dt>
                                      URL:
                                    </dt>
                                     
                                    <dd>
                                      <a
                                        href=""
                                      />
                                       
                                    </dd>
                                    <span>
                                      <dt>
                                        ID:
                                      </dt>
                                       
                                      <dd>
                                        <code>
                                          9950ba5a-0887-40a9-2b8f-8b50292cc7fb
                                        </code>
                                      </dd>
                                    </span>
                                    <span>
                                      <dt>
                                        Parameters:
                                      </dt>
                                       
                                      <dd>
                                        0
                                      </dd>
                                    </span>
                                    <span>
                                      <dt>
                                        Entities:
                                      </dt>
                                       
                                      <dd>
                                        0
                                      </dd>
                                    </span>
                                  </dl>
                                </div>
                                <br />
                                <br />
                                <br />
                              </div>
                            </div>
                          </Col>
                        </div>
                      </Row>
                    </ContentPackDetails>
                  </div>
                </div>
              </AutoAffix>
            </div>
          </Col>
        </div>
      </Row>
    </Wizard>
    <ScrollButton
      delay={5}
      possition="middle"
      scrollSteps={50}
    >
      <span />
    </ScrollButton>
  </div>
</ContentPackEdit>
`;

exports[`<ContentPackEdit /> should render spinner with no content pack 1`] = `
<ContentPackEdit
  appliedParameter={Object {}}
  edit={false}
  entityIndex={Object {}}
  fetchedEntities={Array []}
  onGetEntities={[Function]}
  onSave={[Function]}
  onStateChange={[Function]}
  selectedEntities={Object {}}
>
  <Spinner
    delay={200}
    name="spinner"
    text="Loading..."
  >
    <Delayed
      delay={200}
    />
  </Spinner>
</ContentPackEdit>
`;

exports[`<ContentPackEdit /> should render with content pack for edit 1`] = `
.c1.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c1.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c1.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c1.btn-danger[disabled],
.c1.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c1.btn-danger[disabled]:hover,
.c1.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c1.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c1.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c1.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c1.btn-default[disabled],
.c1.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c1.btn-default[disabled]:hover,
.c1.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c1.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c1.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c1.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c1.btn-info[disabled],
.c1.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c1.btn-info[disabled]:hover,
.c1.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c1.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c1.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c1.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c1.btn-link[disabled],
.c1.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c1.btn-link[disabled]:hover,
.c1.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c1.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c1.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c1.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c1.btn-primary[disabled],
.c1.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c1.btn-primary[disabled]:hover,
.c1.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c1.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c1.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c1.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c1.btn-success[disabled],
.c1.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c1.btn-success[disabled]:hover,
.c1.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c1.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c1.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c1.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c1.btn-warning[disabled],
.c1.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c1.btn-warning[disabled]:hover,
.c1.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2 {
  color: #1f1f1f;
  font-weight: bold;
  margin-bottom: 5px;
  display: inline-block;
}

.c3 {
  color: #1f1f1f;
  background-color: #fff;
  border-color: #cdcdcd;
}

.c3::-webkit-input-placeholder {
  color: #9b9b9b;
}

.c3::-moz-placeholder {
  color: #9b9b9b;
}

.c3:-ms-input-placeholder {
  color: #9b9b9b;
}

.c3::placeholder {
  color: #9b9b9b;
}

.c3:focus {
  border-color: #5890f1;
  box-shadow: inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(88,144,241,0.4);
}

.c3[disabled],
.c3[readonly],
fieldset[disabled] .c3 {
  background-color: #cdcdcd;
}

.c3 ~ .form-control-feedback.glyphicon {
  display: none;
}

.c4 {
  display: block;
  margin-top: 5px;
  margin-bottom: 10px;
  color: #838383;
}

.c0.nav > li > a:hover,
.c0.nav > li > a:focus {
  background-color: #e6e6e6;
}

.c0.nav > li.disabled > a {
  color: #9b9b9b;
}

.c0.nav > li.disabled > a:hover,
.c0.nav > li.disabled > a:focus {
  color: #9b9b9b;
}

.c0.nav .open > a,
.c0.nav .open > a:hover,
.c0.nav .open > a:focus {
  background-color: #e6e6e6;
  border-color: #702785;
}

.c0.nav.nav-pills > li.active > a,
.c0.nav.nav-pills > li.active > a:hover,
.c0.nav.nav-pills > li.active > a:focus {
  color: #fff;
  background-color: #702785;
}

.c0.nav .nav-tabs {
  border-bottom-color: rgb(198,207,231);
}

.c0.nav .nav-tabs > li > a {
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
  color: #1f1f1f;
  border-color: #cdcdcd #cdcdcd rgb(198,207,231);
}

.c0.nav .nav-tabs > li > a:hover {
  background-color: #cdcdcd;
  color: rgb(46,46,46);
}

.c0.nav .nav-tabs > li.active > a,
.c0.nav .nav-tabs > li.active > a:hover,
.c0.nav .nav-tabs > li.active > a:focus {
  color: #1f1f1f;
  background-color: #ffffff;
  border-color: rgb(198,207,231);
  border-bottom-color: transparent;
}

.c0.nav .nav-tabs > li.disabled > a,
.c0.nav .nav-tabs > li.disabled > a:hover,
.c0.nav .nav-tabs > li.disabled > a:focus {
  color: #9b9b9b;
  background-color: #ffffff;
  border-color: #ffffff #ffffff rgb(198,207,231);
  cursor: not-allowed;
}

.c0.nav.nav-justified > .active > a,
.c0.nav.nav-justified > .active > a:hover,
.c0.nav.nav-justified > .active > a:focus {
  border-color: rgb(198,207,231);
}

.c11 {
  background-color: #e6e6e6;
  border-color: #cdcdcd;
}

.c5 {
  font-size: 14px;
  line-height: 20px;
}

.c5 label {
  min-height: 20px;
  margin-bottom: 2px;
  margin-right: 5px;
}

.c5 label * {
  cursor: pointer;
}

.c6 {
  display: inline-block;
  width: 20px;
  margin-right: 5px;
}

.c7.fa-stack {
  cursor: pointer;
  font-size: 1.4em;
  line-height: 20px;
  width: 1em;
  height: 1em;
  vertical-align: text-top;
}

.c7.fa-stack:hover [class*="fa-"] {
  color: #702785;
  opacity: 1;
}

.c7 [class*="fa-"]:first-child {
  opacity: 0;
}

.c7 [class*="fa-"]:first-child ~ [class*="fa-"]:hover {
  color: #fff;
}

.c8 {
  font-size: 14px;
}

.c9 {
  border: 0;
  padding: 0;
  text-align: left;
  background: transparent;
}

.c10 {
  border-left: 1px #e6e6e6 solid;
  margin-left: 35px;
  margin-top: 10px;
  padding-left: 5px;
}

@media (min-width:768px) {
  .c0.nav.nav-justified > li > a {
    border-bottom-color: rgb(198,207,231);
  }

  .c0.nav.nav-justified > .active > a,
  .c0.nav.nav-justified > .active > a:hover,
  .c0.nav.nav-justified > .active > a:focus {
    border-bottom-color: #ffffff;
  }
}

<ContentPackEdit
  appliedParameter={
    Object {
      "111-beef": Array [
        Object {
          "configKey": "configuration.port",
          "paramName": "PORT",
        },
      ],
    }
  }
  contentPack={
    Object {
      "description": "## No one dares",
      "entities": Array [
        Object {
          "constraints": Array [],
          "data": Object {
            "configuration": Object {
              "listen_address": "1.2.3.4",
              "port": "23",
            },
            "name": "Input",
            "title": "A good input",
          },
          "id": "111-beef",
          "type": "dashboard",
          "v": "1.0",
        },
      ],
      "id": "9950ba5a-0887-40a9-2b8f-8b50292cc7fb",
      "name": "Content Pack the movie",
      "parameters": Array [
        Object {
          "default_value": "23",
          "name": "PORT",
          "title": "Port",
          "type": "integer",
        },
      ],
      "rev": 1,
      "summary": "A old content pack",
      "url": "http://beinstein.com",
      "v": 1,
      "vendor": "Beinstein",
    }
  }
  edit={false}
  entityIndex={
    Object {
      "dashboard": Array [
        Object {
          "id": "111-beef",
          "title": "A good input",
          "type": "dashboard",
        },
      ],
    }
  }
  fetchedEntities={Array []}
  onGetEntities={[Function]}
  onSave={[Function]}
  onStateChange={[Function]}
  selectedEntities={
    Object {
      "dashboard": Array [
        Object {
          "id": "111-beef",
          "type": "dashbaord",
        },
      ],
    }
  }
>
  <div>
    <Wizard
      NavigationComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "STYLES": Array [
            "tabs",
            "pills",
          ],
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "Nav-dzawzr-0",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              [Function],
            ],
          },
          "displayName": "Nav",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "Nav-dzawzr-0",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      affixed={true}
      containerClassName="content"
      hidePreviousNextButtons={false}
      horizontal={false}
      justified={false}
      onStepChange={[Function]}
      steps={
        Array [
          Object {
            "component": <ContentPackSelection
              contentPack={
                Object {
                  "description": "## No one dares",
                  "entities": Array [
                    Object {
                      "constraints": Array [],
                      "data": Object {
                        "configuration": Object {
                          "listen_address": "1.2.3.4",
                          "port": "23",
                        },
                        "name": "Input",
                        "title": "A good input",
                      },
                      "id": "111-beef",
                      "type": "dashboard",
                      "v": "1.0",
                    },
                  ],
                  "id": "9950ba5a-0887-40a9-2b8f-8b50292cc7fb",
                  "name": "Content Pack the movie",
                  "parameters": Array [
                    Object {
                      "default_value": "23",
                      "name": "PORT",
                      "title": "Port",
                      "type": "integer",
                    },
                  ],
                  "rev": 1,
                  "summary": "A old content pack",
                  "url": "http://beinstein.com",
                  "v": 1,
                  "vendor": "Beinstein",
                }
              }
              edit={false}
              entities={
                Object {
                  "dashboard": Array [
                    Object {
                      "id": "111-beef",
                      "title": "A good input",
                      "type": "dashboard",
                    },
                  ],
                }
              }
              onStateChange={[Function]}
              selectedEntities={
                Object {
                  "dashboard": Array [
                    Object {
                      "id": "111-beef",
                      "type": "dashbaord",
                    },
                  ],
                }
              }
            />,
            "key": "selection",
            "title": "Content Selection",
          },
          Object {
            "component": <ContentPackParameters
              appliedParameter={
                Object {
                  "111-beef": Array [
                    Object {
                      "configKey": "configuration.port",
                      "paramName": "PORT",
                    },
                  ],
                }
              }
              contentPack={
                Object {
                  "description": "## No one dares",
                  "entities": Array [
                    Object {
                      "constraints": Array [],
                      "data": Object {
                        "configuration": Object {
                          "listen_address": "1.2.3.4",
                          "port": "23",
                        },
                        "name": "Input",
                        "title": "A good input",
                      },
                      "id": "111-beef",
                      "type": "dashboard",
                      "v": "1.0",
                    },
                  ],
                  "id": "9950ba5a-0887-40a9-2b8f-8b50292cc7fb",
                  "name": "Content Pack the movie",
                  "parameters": Array [
                    Object {
                      "default_value": "23",
                      "name": "PORT",
                      "title": "Port",
                      "type": "integer",
                    },
                  ],
                  "rev": 1,
                  "summary": "A old content pack",
                  "url": "http://beinstein.com",
                  "v": 1,
                  "vendor": "Beinstein",
                }
              }
              onStateChange={[Function]}
            />,
            "disabled": false,
            "key": "parameters",
            "title": "Parameters",
          },
          Object {
            "component": <ContentPackPreview
              contentPack={
                Object {
                  "description": "## No one dares",
                  "entities": Array [
                    Object {
                      "constraints": Array [],
                      "data": Object {
                        "configuration": Object {
                          "listen_address": "1.2.3.4",
                          "port": "23",
                        },
                        "name": "Input",
                        "title": "A good input",
                      },
                      "id": "111-beef",
                      "type": "dashboard",
                      "v": "1.0",
                    },
                  ],
                  "id": "9950ba5a-0887-40a9-2b8f-8b50292cc7fb",
                  "name": "Content Pack the movie",
                  "parameters": Array [
                    Object {
                      "default_value": "23",
                      "name": "PORT",
                      "title": "Port",
                      "type": "integer",
                    },
                  ],
                  "rev": 1,
                  "summary": "A old content pack",
                  "url": "http://beinstein.com",
                  "v": 1,
                  "vendor": "Beinstein",
                }
              }
              onSave={[Function]}
            />,
            "disabled": true,
            "key": "preview",
            "title": "Preview",
          },
        ]
      }
    >
      <Row
        bsClass="row"
        className="content"
        componentClass="div"
      >
        <div
          className="content row"
        >
          <Col
            bsClass="col"
            className="subnavigation"
            componentClass="div"
            md={2}
          >
            <div
              className="subnavigation col-md-2"
            >
              <Nav
                activeKey="selection"
                bsStyle="pills"
                justified={false}
                onSelect={[Function]}
                stacked={true}
              >
                <StyledComponent
                  activeKey="selection"
                  bsStyle="pills"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "STYLES": Array [
                        "tabs",
                        "pills",
                      ],
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Nav-dzawzr-0",
                        "isStatic": false,
                        "lastClassName": "c0",
                        "rules": Array [
                          [Function],
                        ],
                      },
                      "displayName": "Nav",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Nav-dzawzr-0",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  justified={false}
                  onSelect={[Function]}
                  stacked={true}
                >
                  <Nav
                    activeKey="selection"
                    bsClass="nav"
                    bsStyle="pills"
                    className="c0"
                    justified={false}
                    onSelect={[Function]}
                    pullLeft={false}
                    pullRight={false}
                    stacked={true}
                  >
                    <ul
                      className="c0 nav nav-pills nav-stacked"
                      role={null}
                    >
                      <NavItem
                        active={true}
                        activeKey="selection"
                        disabled={false}
                        eventKey="selection"
                        key=".$selection"
                        onSelect={[Function]}
                      >
                        <li
                          className="active"
                          role="presentation"
                        >
                          <SafeAnchor
                            componentClass="a"
                            disabled={false}
                            onClick={[Function]}
                          >
                            <a
                              href="#"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              role="button"
                            >
                              Content Selection
                            </a>
                          </SafeAnchor>
                        </li>
                      </NavItem>
                      <NavItem
                        active={false}
                        activeKey="selection"
                        disabled={false}
                        eventKey="parameters"
                        key=".$parameters"
                        onSelect={[Function]}
                      >
                        <li
                          className=""
                          role="presentation"
                        >
                          <SafeAnchor
                            componentClass="a"
                            disabled={false}
                            onClick={[Function]}
                          >
                            <a
                              href="#"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              role="button"
                            >
                              Parameters
                            </a>
                          </SafeAnchor>
                        </li>
                      </NavItem>
                      <NavItem
                        active={false}
                        activeKey="selection"
                        disabled={true}
                        eventKey="preview"
                        key=".$preview"
                        onSelect={[Function]}
                      >
                        <li
                          className="disabled"
                          role="presentation"
                        >
                          <SafeAnchor
                            componentClass="a"
                            disabled={true}
                            onClick={[Function]}
                          >
                            <a
                              href="#"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              role="button"
                              style={
                                Object {
                                  "pointerEvents": "none",
                                }
                              }
                              tabIndex={-1}
                            >
                              Preview
                            </a>
                          </SafeAnchor>
                        </li>
                      </NavItem>
                    </ul>
                  </Nav>
                </StyledComponent>
              </Nav>
              <br />
              <Row
                bsClass="row"
                componentClass="div"
              >
                <div
                  className="row"
                >
                  <Col
                    bsClass="col"
                    componentClass="div"
                    xs={6}
                  >
                    <div
                      className="col-xs-6"
                    >
                      <ForwardRef
                        bsSize="small"
                        bsStyle="info"
                        disabled={true}
                        onClick={[Function]}
                      >
                        <Button__StyledButton
                          bsSize="small"
                          bsStyle="info"
                          disabled={true}
                          onClick={[Function]}
                        >
                          <StyledComponent
                            bsSize="small"
                            bsStyle="info"
                            disabled={true}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "SIZES": Array [
                                  "large",
                                  "small",
                                  "xsmall",
                                ],
                                "STYLES": Array [
                                  "success",
                                  "warning",
                                  "danger",
                                  "info",
                                  "default",
                                  "primary",
                                  "link",
                                ],
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "Button__StyledButton-c9cbmb-0",
                                  "isStatic": false,
                                  "lastClassName": "c1",
                                  "rules": Array [
                                    [Function],
                                  ],
                                },
                                "displayName": "Button__StyledButton",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onClick={[Function]}
                          >
                            <Button
                              active={false}
                              block={false}
                              bsClass="btn"
                              bsSize="small"
                              bsStyle="info"
                              className="c1"
                              disabled={true}
                              onClick={[Function]}
                            >
                              <button
                                className="c1 btn btn-sm btn-info"
                                disabled={true}
                                onClick={[Function]}
                                type="button"
                              >
                                Previous
                              </button>
                            </Button>
                          </StyledComponent>
                        </Button__StyledButton>
                      </ForwardRef>
                    </div>
                  </Col>
                  <Col
                    bsClass="col"
                    className="text-right"
                    componentClass="div"
                    xs={6}
                  >
                    <div
                      className="text-right col-xs-6"
                    >
                      <ForwardRef
                        bsSize="small"
                        bsStyle="info"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <Button__StyledButton
                          bsSize="small"
                          bsStyle="info"
                          disabled={false}
                          onClick={[Function]}
                        >
                          <StyledComponent
                            bsSize="small"
                            bsStyle="info"
                            disabled={false}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "SIZES": Array [
                                  "large",
                                  "small",
                                  "xsmall",
                                ],
                                "STYLES": Array [
                                  "success",
                                  "warning",
                                  "danger",
                                  "info",
                                  "default",
                                  "primary",
                                  "link",
                                ],
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "Button__StyledButton-c9cbmb-0",
                                  "isStatic": false,
                                  "lastClassName": "c1",
                                  "rules": Array [
                                    [Function],
                                  ],
                                },
                                "displayName": "Button__StyledButton",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onClick={[Function]}
                          >
                            <Button
                              active={false}
                              block={false}
                              bsClass="btn"
                              bsSize="small"
                              bsStyle="info"
                              className="c1"
                              disabled={false}
                              onClick={[Function]}
                            >
                              <button
                                className="c1 btn btn-sm btn-info"
                                disabled={false}
                                onClick={[Function]}
                                type="button"
                              >
                                Next
                              </button>
                            </Button>
                          </StyledComponent>
                        </Button__StyledButton>
                      </ForwardRef>
                    </div>
                  </Col>
                </div>
              </Row>
            </div>
          </Col>
          <Col
            bsClass="col"
            componentClass="div"
            md={7}
          >
            <div
              className="col-md-7"
            >
              <ContentPackSelection
                contentPack={
                  Object {
                    "description": "## No one dares",
                    "entities": Array [
                      Object {
                        "constraints": Array [],
                        "data": Object {
                          "configuration": Object {
                            "listen_address": "1.2.3.4",
                            "port": "23",
                          },
                          "name": "Input",
                          "title": "A good input",
                        },
                        "id": "111-beef",
                        "type": "dashboard",
                        "v": "1.0",
                      },
                    ],
                    "id": "9950ba5a-0887-40a9-2b8f-8b50292cc7fb",
                    "name": "Content Pack the movie",
                    "parameters": Array [
                      Object {
                        "default_value": "23",
                        "name": "PORT",
                        "title": "Port",
                        "type": "integer",
                      },
                    ],
                    "rev": 1,
                    "summary": "A old content pack",
                    "url": "http://beinstein.com",
                    "v": 1,
                    "vendor": "Beinstein",
                  }
                }
                edit={false}
                entities={
                  Object {
                    "dashboard": Array [
                      Object {
                        "id": "111-beef",
                        "title": "A good input",
                        "type": "dashboard",
                      },
                    ],
                  }
                }
                onStateChange={[Function]}
                selectedEntities={
                  Object {
                    "dashboard": Array [
                      Object {
                        "id": "111-beef",
                        "type": "dashbaord",
                      },
                    ],
                  }
                }
              >
                <div>
                  <Row
                    bsClass="row"
                    componentClass="div"
                  >
                    <div
                      className="row"
                    >
                      <Col
                        bsClass="col"
                        componentClass="div"
                        lg={8}
                        smOffset={1}
                      >
                        <div
                          className="col-lg-8 col-sm-offset-1"
                        >
                          <h2>
                            General Information
                          </h2>
                          <br />
                          <form
                            className="content-selection-form"
                            id="content-selection-form"
                            onSubmit={[Function]}
                          >
                            <fieldset>
                              <Input
                                addonAfter={null}
                                bsStyle={null}
                                buttonAfter={null}
                                help="Required. Give a descriptive name for this content pack."
                                id="name"
                                label="Name"
                                maxLength={250}
                                name="name"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="text"
                                value="Content Pack the movie"
                              >
                                <Component
                                  controlId="name"
                                  validationState={null}
                                >
                                  <FormGroup__StyledFormGroup
                                    controlId="name"
                                    validationState={null}
                                  >
                                    <StyledComponent
                                      controlId="name"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "SIZES": Array [
                                            "large",
                                            "small",
                                          ],
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                                            "isStatic": false,
                                            "lastClassName": "ekazNr",
                                            "rules": Array [
                                              [Function],
                                              ";",
                                            ],
                                          },
                                          "displayName": "FormGroup__StyledFormGroup",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      validationState={null}
                                    >
                                      <FormGroup
                                        bsClass="form-group"
                                        className=""
                                        controlId="name"
                                        validationState={null}
                                      >
                                        <div
                                          className="form-group"
                                        >
                                          <ControlLabel>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                                    "isStatic": false,
                                                    "lastClassName": "c2",
                                                    "rules": Array [
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "ControlLabel",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                                  "target": [Function],
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <ControlLabel
                                                bsClass="control-label"
                                                className="c2"
                                                srOnly={false}
                                              >
                                                <label
                                                  className="c2 control-label"
                                                  htmlFor="name"
                                                >
                                                  Name
                                                </label>
                                              </ControlLabel>
                                            </StyledComponent>
                                          </ControlLabel>
                                          <InputWrapper>
                                            <span>
                                              <FormControl
                                                componentClass="input"
                                                inputRef={[Function]}
                                                label="Name"
                                                maxLength={250}
                                                name="name"
                                                onChange={[Function]}
                                                placeholder=""
                                                required={true}
                                                type="text"
                                                value="Content Pack the movie"
                                              >
                                                <StyledComponent
                                                  componentClass="input"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "Feedback": [Function],
                                                      "SIZES": Array [
                                                        "small",
                                                        "large",
                                                      ],
                                                      "Static": [Function],
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "FormControl-sc-1amoaox-0",
                                                        "isStatic": false,
                                                        "lastClassName": "c3",
                                                        "rules": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "displayName": "FormControl",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  inputRef={[Function]}
                                                  label="Name"
                                                  maxLength={250}
                                                  name="name"
                                                  onChange={[Function]}
                                                  placeholder=""
                                                  required={true}
                                                  type="text"
                                                  value="Content Pack the movie"
                                                >
                                                  <FormControl
                                                    bsClass="form-control"
                                                    className="c3"
                                                    componentClass="input"
                                                    inputRef={[Function]}
                                                    label="Name"
                                                    maxLength={250}
                                                    name="name"
                                                    onChange={[Function]}
                                                    placeholder=""
                                                    required={true}
                                                    type="text"
                                                    value="Content Pack the movie"
                                                  >
                                                    <input
                                                      className="c3 form-control"
                                                      id="name"
                                                      label="Name"
                                                      maxLength={250}
                                                      name="name"
                                                      onChange={[Function]}
                                                      placeholder=""
                                                      required={true}
                                                      type="text"
                                                      value="Content Pack the movie"
                                                    />
                                                  </FormControl>
                                                </StyledComponent>
                                              </FormControl>
                                              <HelpBlock>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "HelpBlock-i8is92-0",
                                                        "isStatic": false,
                                                        "lastClassName": "c4",
                                                        "rules": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "displayName": "HelpBlock",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "HelpBlock-i8is92-0",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <HelpBlock
                                                    bsClass="help-block"
                                                    className="c4"
                                                  >
                                                    <span
                                                      className="c4 help-block"
                                                    >
                                                      Required. Give a descriptive name for this content pack.
                                                    </span>
                                                  </HelpBlock>
                                                </StyledComponent>
                                              </HelpBlock>
                                            </span>
                                          </InputWrapper>
                                        </div>
                                      </FormGroup>
                                    </StyledComponent>
                                  </FormGroup__StyledFormGroup>
                                </Component>
                              </Input>
                              <Input
                                addonAfter={null}
                                bsStyle={null}
                                buttonAfter={null}
                                help="Required. Give a short summary of the content pack."
                                id="summary"
                                label="Summary"
                                maxLength={250}
                                name="summary"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="text"
                                value="A old content pack"
                              >
                                <Component
                                  controlId="summary"
                                  validationState={null}
                                >
                                  <FormGroup__StyledFormGroup
                                    controlId="summary"
                                    validationState={null}
                                  >
                                    <StyledComponent
                                      controlId="summary"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "SIZES": Array [
                                            "large",
                                            "small",
                                          ],
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                                            "isStatic": false,
                                            "lastClassName": "ekazNr",
                                            "rules": Array [
                                              [Function],
                                              ";",
                                            ],
                                          },
                                          "displayName": "FormGroup__StyledFormGroup",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      validationState={null}
                                    >
                                      <FormGroup
                                        bsClass="form-group"
                                        className=""
                                        controlId="summary"
                                        validationState={null}
                                      >
                                        <div
                                          className="form-group"
                                        >
                                          <ControlLabel>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                                    "isStatic": false,
                                                    "lastClassName": "c2",
                                                    "rules": Array [
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "ControlLabel",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                                  "target": [Function],
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <ControlLabel
                                                bsClass="control-label"
                                                className="c2"
                                                srOnly={false}
                                              >
                                                <label
                                                  className="c2 control-label"
                                                  htmlFor="summary"
                                                >
                                                  Summary
                                                </label>
                                              </ControlLabel>
                                            </StyledComponent>
                                          </ControlLabel>
                                          <InputWrapper>
                                            <span>
                                              <FormControl
                                                componentClass="input"
                                                inputRef={[Function]}
                                                label="Summary"
                                                maxLength={250}
                                                name="summary"
                                                onChange={[Function]}
                                                placeholder=""
                                                required={true}
                                                type="text"
                                                value="A old content pack"
                                              >
                                                <StyledComponent
                                                  componentClass="input"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "Feedback": [Function],
                                                      "SIZES": Array [
                                                        "small",
                                                        "large",
                                                      ],
                                                      "Static": [Function],
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "FormControl-sc-1amoaox-0",
                                                        "isStatic": false,
                                                        "lastClassName": "c3",
                                                        "rules": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "displayName": "FormControl",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  inputRef={[Function]}
                                                  label="Summary"
                                                  maxLength={250}
                                                  name="summary"
                                                  onChange={[Function]}
                                                  placeholder=""
                                                  required={true}
                                                  type="text"
                                                  value="A old content pack"
                                                >
                                                  <FormControl
                                                    bsClass="form-control"
                                                    className="c3"
                                                    componentClass="input"
                                                    inputRef={[Function]}
                                                    label="Summary"
                                                    maxLength={250}
                                                    name="summary"
                                                    onChange={[Function]}
                                                    placeholder=""
                                                    required={true}
                                                    type="text"
                                                    value="A old content pack"
                                                  >
                                                    <input
                                                      className="c3 form-control"
                                                      id="summary"
                                                      label="Summary"
                                                      maxLength={250}
                                                      name="summary"
                                                      onChange={[Function]}
                                                      placeholder=""
                                                      required={true}
                                                      type="text"
                                                      value="A old content pack"
                                                    />
                                                  </FormControl>
                                                </StyledComponent>
                                              </FormControl>
                                              <HelpBlock>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "HelpBlock-i8is92-0",
                                                        "isStatic": false,
                                                        "lastClassName": "c4",
                                                        "rules": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "displayName": "HelpBlock",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "HelpBlock-i8is92-0",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <HelpBlock
                                                    bsClass="help-block"
                                                    className="c4"
                                                  >
                                                    <span
                                                      className="c4 help-block"
                                                    >
                                                      Required. Give a short summary of the content pack.
                                                    </span>
                                                  </HelpBlock>
                                                </StyledComponent>
                                              </HelpBlock>
                                            </span>
                                          </InputWrapper>
                                        </div>
                                      </FormGroup>
                                    </StyledComponent>
                                  </FormGroup__StyledFormGroup>
                                </Component>
                              </Input>
                              <Input
                                addonAfter={null}
                                bsStyle={null}
                                buttonAfter={null}
                                help="Give a long description of the content pack in markdown."
                                id="description"
                                label="Description"
                                name="description"
                                onChange={[Function]}
                                placeholder=""
                                rows={6}
                                type="textarea"
                                value="## No one dares"
                              >
                                <Component
                                  controlId="description"
                                  validationState={null}
                                >
                                  <FormGroup__StyledFormGroup
                                    controlId="description"
                                    validationState={null}
                                  >
                                    <StyledComponent
                                      controlId="description"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "SIZES": Array [
                                            "large",
                                            "small",
                                          ],
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                                            "isStatic": false,
                                            "lastClassName": "ekazNr",
                                            "rules": Array [
                                              [Function],
                                              ";",
                                            ],
                                          },
                                          "displayName": "FormGroup__StyledFormGroup",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      validationState={null}
                                    >
                                      <FormGroup
                                        bsClass="form-group"
                                        className=""
                                        controlId="description"
                                        validationState={null}
                                      >
                                        <div
                                          className="form-group"
                                        >
                                          <ControlLabel>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                                    "isStatic": false,
                                                    "lastClassName": "c2",
                                                    "rules": Array [
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "ControlLabel",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                                  "target": [Function],
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <ControlLabel
                                                bsClass="control-label"
                                                className="c2"
                                                srOnly={false}
                                              >
                                                <label
                                                  className="c2 control-label"
                                                  htmlFor="description"
                                                >
                                                  Description
                                                </label>
                                              </ControlLabel>
                                            </StyledComponent>
                                          </ControlLabel>
                                          <InputWrapper>
                                            <span>
                                              <FormControl
                                                componentClass="textarea"
                                                inputRef={[Function]}
                                                label="Description"
                                                name="description"
                                                onChange={[Function]}
                                                placeholder=""
                                                rows={6}
                                                type="textarea"
                                                value="## No one dares"
                                              >
                                                <StyledComponent
                                                  componentClass="textarea"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "Feedback": [Function],
                                                      "SIZES": Array [
                                                        "small",
                                                        "large",
                                                      ],
                                                      "Static": [Function],
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "FormControl-sc-1amoaox-0",
                                                        "isStatic": false,
                                                        "lastClassName": "c3",
                                                        "rules": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "displayName": "FormControl",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  inputRef={[Function]}
                                                  label="Description"
                                                  name="description"
                                                  onChange={[Function]}
                                                  placeholder=""
                                                  rows={6}
                                                  type="textarea"
                                                  value="## No one dares"
                                                >
                                                  <FormControl
                                                    bsClass="form-control"
                                                    className="c3"
                                                    componentClass="textarea"
                                                    inputRef={[Function]}
                                                    label="Description"
                                                    name="description"
                                                    onChange={[Function]}
                                                    placeholder=""
                                                    rows={6}
                                                    type="textarea"
                                                    value="## No one dares"
                                                  >
                                                    <textarea
                                                      className="c3 form-control"
                                                      id="description"
                                                      label="Description"
                                                      name="description"
                                                      onChange={[Function]}
                                                      placeholder=""
                                                      rows={6}
                                                      type="textarea"
                                                      value="## No one dares"
                                                    />
                                                  </FormControl>
                                                </StyledComponent>
                                              </FormControl>
                                              <HelpBlock>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "HelpBlock-i8is92-0",
                                                        "isStatic": false,
                                                        "lastClassName": "c4",
                                                        "rules": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "displayName": "HelpBlock",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "HelpBlock-i8is92-0",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <HelpBlock
                                                    bsClass="help-block"
                                                    className="c4"
                                                  >
                                                    <span
                                                      className="c4 help-block"
                                                    >
                                                      Give a long description of the content pack in markdown.
                                                    </span>
                                                  </HelpBlock>
                                                </StyledComponent>
                                              </HelpBlock>
                                            </span>
                                          </InputWrapper>
                                        </div>
                                      </FormGroup>
                                    </StyledComponent>
                                  </FormGroup__StyledFormGroup>
                                </Component>
                              </Input>
                              <Input
                                addonAfter={null}
                                bsStyle={null}
                                buttonAfter={null}
                                help="Required. Who did this content pack and how can they be reached, e.g. Name and email."
                                id="vendor"
                                label="Vendor"
                                maxLength={250}
                                name="vendor"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="text"
                                value="Beinstein"
                              >
                                <Component
                                  controlId="vendor"
                                  validationState={null}
                                >
                                  <FormGroup__StyledFormGroup
                                    controlId="vendor"
                                    validationState={null}
                                  >
                                    <StyledComponent
                                      controlId="vendor"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "SIZES": Array [
                                            "large",
                                            "small",
                                          ],
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                                            "isStatic": false,
                                            "lastClassName": "ekazNr",
                                            "rules": Array [
                                              [Function],
                                              ";",
                                            ],
                                          },
                                          "displayName": "FormGroup__StyledFormGroup",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      validationState={null}
                                    >
                                      <FormGroup
                                        bsClass="form-group"
                                        className=""
                                        controlId="vendor"
                                        validationState={null}
                                      >
                                        <div
                                          className="form-group"
                                        >
                                          <ControlLabel>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                                    "isStatic": false,
                                                    "lastClassName": "c2",
                                                    "rules": Array [
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "ControlLabel",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                                  "target": [Function],
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <ControlLabel
                                                bsClass="control-label"
                                                className="c2"
                                                srOnly={false}
                                              >
                                                <label
                                                  className="c2 control-label"
                                                  htmlFor="vendor"
                                                >
                                                  Vendor
                                                </label>
                                              </ControlLabel>
                                            </StyledComponent>
                                          </ControlLabel>
                                          <InputWrapper>
                                            <span>
                                              <FormControl
                                                componentClass="input"
                                                inputRef={[Function]}
                                                label="Vendor"
                                                maxLength={250}
                                                name="vendor"
                                                onChange={[Function]}
                                                placeholder=""
                                                required={true}
                                                type="text"
                                                value="Beinstein"
                                              >
                                                <StyledComponent
                                                  componentClass="input"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "Feedback": [Function],
                                                      "SIZES": Array [
                                                        "small",
                                                        "large",
                                                      ],
                                                      "Static": [Function],
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "FormControl-sc-1amoaox-0",
                                                        "isStatic": false,
                                                        "lastClassName": "c3",
                                                        "rules": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "displayName": "FormControl",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  inputRef={[Function]}
                                                  label="Vendor"
                                                  maxLength={250}
                                                  name="vendor"
                                                  onChange={[Function]}
                                                  placeholder=""
                                                  required={true}
                                                  type="text"
                                                  value="Beinstein"
                                                >
                                                  <FormControl
                                                    bsClass="form-control"
                                                    className="c3"
                                                    componentClass="input"
                                                    inputRef={[Function]}
                                                    label="Vendor"
                                                    maxLength={250}
                                                    name="vendor"
                                                    onChange={[Function]}
                                                    placeholder=""
                                                    required={true}
                                                    type="text"
                                                    value="Beinstein"
                                                  >
                                                    <input
                                                      className="c3 form-control"
                                                      id="vendor"
                                                      label="Vendor"
                                                      maxLength={250}
                                                      name="vendor"
                                                      onChange={[Function]}
                                                      placeholder=""
                                                      required={true}
                                                      type="text"
                                                      value="Beinstein"
                                                    />
                                                  </FormControl>
                                                </StyledComponent>
                                              </FormControl>
                                              <HelpBlock>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "HelpBlock-i8is92-0",
                                                        "isStatic": false,
                                                        "lastClassName": "c4",
                                                        "rules": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "displayName": "HelpBlock",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "HelpBlock-i8is92-0",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <HelpBlock
                                                    bsClass="help-block"
                                                    className="c4"
                                                  >
                                                    <span
                                                      className="c4 help-block"
                                                    >
                                                      Required. Who did this content pack and how can they be reached, e.g. Name and email.
                                                    </span>
                                                  </HelpBlock>
                                                </StyledComponent>
                                              </HelpBlock>
                                            </span>
                                          </InputWrapper>
                                        </div>
                                      </FormGroup>
                                    </StyledComponent>
                                  </FormGroup__StyledFormGroup>
                                </Component>
                              </Input>
                              <Input
                                addonAfter={null}
                                bsStyle={null}
                                buttonAfter={null}
                                help="Where can I find the content pack. e.g. github url"
                                id="url"
                                label="URL"
                                maxLength={250}
                                name="url"
                                onChange={[Function]}
                                placeholder=""
                                type="text"
                                value="http://beinstein.com"
                              >
                                <Component
                                  controlId="url"
                                  validationState={null}
                                >
                                  <FormGroup__StyledFormGroup
                                    controlId="url"
                                    validationState={null}
                                  >
                                    <StyledComponent
                                      controlId="url"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "SIZES": Array [
                                            "large",
                                            "small",
                                          ],
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                                            "isStatic": false,
                                            "lastClassName": "ekazNr",
                                            "rules": Array [
                                              [Function],
                                              ";",
                                            ],
                                          },
                                          "displayName": "FormGroup__StyledFormGroup",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      validationState={null}
                                    >
                                      <FormGroup
                                        bsClass="form-group"
                                        className=""
                                        controlId="url"
                                        validationState={null}
                                      >
                                        <div
                                          className="form-group"
                                        >
                                          <ControlLabel>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                                    "isStatic": false,
                                                    "lastClassName": "c2",
                                                    "rules": Array [
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "ControlLabel",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                                  "target": [Function],
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <ControlLabel
                                                bsClass="control-label"
                                                className="c2"
                                                srOnly={false}
                                              >
                                                <label
                                                  className="c2 control-label"
                                                  htmlFor="url"
                                                >
                                                  URL
                                                </label>
                                              </ControlLabel>
                                            </StyledComponent>
                                          </ControlLabel>
                                          <InputWrapper>
                                            <span>
                                              <FormControl
                                                componentClass="input"
                                                inputRef={[Function]}
                                                label="URL"
                                                maxLength={250}
                                                name="url"
                                                onChange={[Function]}
                                                placeholder=""
                                                type="text"
                                                value="http://beinstein.com"
                                              >
                                                <StyledComponent
                                                  componentClass="input"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "Feedback": [Function],
                                                      "SIZES": Array [
                                                        "small",
                                                        "large",
                                                      ],
                                                      "Static": [Function],
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "FormControl-sc-1amoaox-0",
                                                        "isStatic": false,
                                                        "lastClassName": "c3",
                                                        "rules": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "displayName": "FormControl",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  inputRef={[Function]}
                                                  label="URL"
                                                  maxLength={250}
                                                  name="url"
                                                  onChange={[Function]}
                                                  placeholder=""
                                                  type="text"
                                                  value="http://beinstein.com"
                                                >
                                                  <FormControl
                                                    bsClass="form-control"
                                                    className="c3"
                                                    componentClass="input"
                                                    inputRef={[Function]}
                                                    label="URL"
                                                    maxLength={250}
                                                    name="url"
                                                    onChange={[Function]}
                                                    placeholder=""
                                                    type="text"
                                                    value="http://beinstein.com"
                                                  >
                                                    <input
                                                      className="c3 form-control"
                                                      id="url"
                                                      label="URL"
                                                      maxLength={250}
                                                      name="url"
                                                      onChange={[Function]}
                                                      placeholder=""
                                                      type="text"
                                                      value="http://beinstein.com"
                                                    />
                                                  </FormControl>
                                                </StyledComponent>
                                              </FormControl>
                                              <HelpBlock>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "HelpBlock-i8is92-0",
                                                        "isStatic": false,
                                                        "lastClassName": "c4",
                                                        "rules": Array [
                                                          [Function],
                                                        ],
                                                      },
                                                      "displayName": "HelpBlock",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "HelpBlock-i8is92-0",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <HelpBlock
                                                    bsClass="help-block"
                                                    className="c4"
                                                  >
                                                    <span
                                                      className="c4 help-block"
                                                    >
                                                      Where can I find the content pack. e.g. github url
                                                    </span>
                                                  </HelpBlock>
                                                </StyledComponent>
                                              </HelpBlock>
                                            </span>
                                          </InputWrapper>
                                        </div>
                                      </FormGroup>
                                    </StyledComponent>
                                  </FormGroup__StyledFormGroup>
                                </Component>
                              </Input>
                            </fieldset>
                          </form>
                        </div>
                      </Col>
                    </div>
                  </Row>
                  <Row
                    bsClass="row"
                    componentClass="div"
                  >
                    <div
                      className="row"
                    >
                      <Col
                        bsClass="col"
                        componentClass="div"
                        lg={8}
                        smOffset={1}
                      >
                        <div
                          className="col-lg-8 col-sm-offset-1"
                        >
                          <h2>
                            Content Pack selection
                          </h2>
                        </div>
                      </Col>
                    </div>
                  </Row>
                  <Row
                    bsClass="row"
                    componentClass="div"
                  >
                    <div
                      className="row"
                    >
                      <Col
                        bsClass="col"
                        componentClass="div"
                        lg={8}
                        smOffset={1}
                      >
                        <div
                          className="col-lg-8 col-sm-offset-1"
                        >
                          <SearchForm
                            buttonLeftMargin={5}
                            id="filter-input"
                            label={null}
                            loadingLabel="Loading..."
                            onQueryChange={[Function]}
                            onReset={[Function]}
                            onSearch={[Function]}
                            placeholder="Enter search query..."
                            query=""
                            queryHelpComponent={null}
                            queryWidth="auto"
                            resetButtonLabel="Reset"
                            searchBsStyle="default"
                            searchButtonLabel="Filter"
                            topMargin={15}
                            useLoadingState={false}
                            wrapperClass="search"
                          >
                            <div
                              className="search"
                              style={
                                Object {
                                  "marginTop": 15,
                                }
                              }
                            >
                              <form
                                className="form-inline"
                                onSubmit={[Function]}
                              >
                                <div
                                  className="form-group has-feedback"
                                >
                                  <input
                                    autoComplete="off"
                                    className="query form-control"
                                    id="common-search-form-query-input"
                                    onChange={[Function]}
                                    placeholder="Enter search query..."
                                    spellCheck="false"
                                    style={
                                      Object {
                                        "width": "auto",
                                      }
                                    }
                                    type="text"
                                    value=""
                                  />
                                </div>
                                <div
                                  className="form-group"
                                  style={
                                    Object {
                                      "marginLeft": 5,
                                    }
                                  }
                                >
                                  <ForwardRef
                                    bsStyle="default"
                                    className="submit-button"
                                    disabled={false}
                                    type="submit"
                                  >
                                    <Button__StyledButton
                                      bsStyle="default"
                                      className="submit-button"
                                      disabled={false}
                                      type="submit"
                                    >
                                      <StyledComponent
                                        bsStyle="default"
                                        className="submit-button"
                                        disabled={false}
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "SIZES": Array [
                                              "large",
                                              "small",
                                              "xsmall",
                                            ],
                                            "STYLES": Array [
                                              "success",
                                              "warning",
                                              "danger",
                                              "info",
                                              "default",
                                              "primary",
                                              "link",
                                            ],
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "Button__StyledButton-c9cbmb-0",
                                              "isStatic": false,
                                              "lastClassName": "c1",
                                              "rules": Array [
                                                [Function],
                                              ],
                                            },
                                            "displayName": "Button__StyledButton",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                            "target": [Function],
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        type="submit"
                                      >
                                        <Button
                                          active={false}
                                          block={false}
                                          bsClass="btn"
                                          bsStyle="default"
                                          className="c1 submit-button"
                                          disabled={false}
                                          type="submit"
                                        >
                                          <button
                                            className="c1 submit-button btn btn-default"
                                            disabled={false}
                                            type="submit"
                                          >
                                            Filter
                                          </button>
                                        </Button>
                                      </StyledComponent>
                                    </Button__StyledButton>
                                  </ForwardRef>
                                </div>
                                <div
                                  className="form-group"
                                  style={
                                    Object {
                                      "marginLeft": 5,
                                    }
                                  }
                                >
                                  <ForwardRef
                                    bsStyle="default"
                                    className="reset-button"
                                    onClick={[Function]}
                                    type="reset"
                                  >
                                    <Button__StyledButton
                                      bsStyle="default"
                                      className="reset-button"
                                      onClick={[Function]}
                                      type="reset"
                                    >
                                      <StyledComponent
                                        bsStyle="default"
                                        className="reset-button"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "SIZES": Array [
                                              "large",
                                              "small",
                                              "xsmall",
                                            ],
                                            "STYLES": Array [
                                              "success",
                                              "warning",
                                              "danger",
                                              "info",
                                              "default",
                                              "primary",
                                              "link",
                                            ],
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "Button__StyledButton-c9cbmb-0",
                                              "isStatic": false,
                                              "lastClassName": "c1",
                                              "rules": Array [
                                                [Function],
                                              ],
                                            },
                                            "displayName": "Button__StyledButton",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                            "target": [Function],
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                        type="reset"
                                      >
                                        <Button
                                          active={false}
                                          block={false}
                                          bsClass="btn"
                                          bsStyle="default"
                                          className="c1 reset-button"
                                          disabled={false}
                                          onClick={[Function]}
                                          type="reset"
                                        >
                                          <button
                                            className="c1 reset-button btn btn-default"
                                            disabled={false}
                                            onClick={[Function]}
                                            type="reset"
                                          >
                                            Reset
                                          </button>
                                        </Button>
                                      </StyledComponent>
                                    </Button__StyledButton>
                                  </ForwardRef>
                                </div>
                              </form>
                            </div>
                          </SearchForm>
                        </div>
                      </Col>
                    </div>
                  </Row>
                  <Row
                    bsClass="row"
                    componentClass="div"
                  >
                    <div
                      className="row"
                    >
                      <Col
                        bsClass="col"
                        componentClass="div"
                        lg={8}
                        sm={8}
                        smOffset={1}
                      >
                        <div
                          className="col-lg-8 col-sm-8 col-sm-offset-1"
                        >
                          <ExpandableList>
                            <ul
                              className="list"
                            >
                              <ExpandableListItem
                                checked={true}
                                expandable={true}
                                expanded={false}
                                header="Dashboard"
                                indetermined={false}
                                key="dashboard"
                                onChange={[Function]}
                                padded={false}
                                selectable={true}
                                stayExpanded={false}
                              >
                                <ExpandableListItem__ItemWrap
                                  padded={false}
                                >
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "ExpandableListItem__ItemWrap-sc-10hsq3a-0",
                                          "isStatic": false,
                                          "lastClassName": "ettoSy",
                                          "rules": Array [
                                            [Function],
                                          ],
                                        },
                                        "displayName": "ExpandableListItem__ItemWrap",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "ExpandableListItem__ItemWrap-sc-10hsq3a-0",
                                        "target": "li",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    padded={false}
                                  >
                                    <li
                                      className=""
                                    >
                                      <ExpandableListItem__Container>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "ExpandableListItem__Container-sc-10hsq3a-1",
                                                "isStatic": false,
                                                "lastClassName": "c5",
                                                "rules": Array [
                                                  "font-size:14px;line-height:20px;label{min-height:20px;margin-bottom:2px;margin-right:5px;*{cursor:pointer;}}",
                                                ],
                                              },
                                              "displayName": "ExpandableListItem__Container",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "ExpandableListItem__Container-sc-10hsq3a-1",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="c5"
                                          >
                                            <Checkbox
                                              bsClass="checkbox"
                                              checked={true}
                                              disabled={false}
                                              inline={true}
                                              inputRef={[Function]}
                                              onChange={[Function]}
                                              title=""
                                            >
                                              <label
                                                className="checkbox-inline"
                                                title=""
                                              >
                                                <input
                                                  checked={true}
                                                  disabled={false}
                                                  onChange={[Function]}
                                                  type="checkbox"
                                                />
                                              </label>
                                            </Checkbox>
                                            <ExpandableListItem__Toggle>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "ExpandableListItem__Toggle-sc-10hsq3a-2",
                                                      "isStatic": false,
                                                      "lastClassName": "c6",
                                                      "rules": Array [
                                                        "display:inline-block;width:20px;margin-right:5px;",
                                                      ],
                                                    },
                                                    "displayName": "ExpandableListItem__Toggle",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "ExpandableListItem__Toggle-sc-10hsq3a-2",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="c6"
                                                >
                                                  <ExpandableListItem__IconStack
                                                    className="fa-stack"
                                                    onClick={[Function]}
                                                    tabIndex={0}
                                                  >
                                                    <StyledComponent
                                                      className="fa-stack"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "ExpandableListItem__IconStack-sc-10hsq3a-3",
                                                            "isStatic": false,
                                                            "lastClassName": "c7",
                                                            "rules": Array [
                                                              [Function],
                                                            ],
                                                          },
                                                          "displayName": "ExpandableListItem__IconStack",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "ExpandableListItem__IconStack-sc-10hsq3a-3",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      onClick={[Function]}
                                                      tabIndex={0}
                                                    >
                                                      <div
                                                        className="c7 fa-stack"
                                                        onClick={[Function]}
                                                        tabIndex={0}
                                                      >
                                                        <Icon
                                                          className="fa-stack-1x"
                                                          name="circle"
                                                        >
                                                          <FontAwesomeIcon
                                                            className="fa-stack-1x"
                                                            icon={
                                                              Object {
                                                                "iconName": "circle",
                                                                "prefix": "fas",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              className="svg-inline--fa fa-circle"
                                                            />
                                                          </FontAwesomeIcon>
                                                        </Icon>
                                                        <Icon
                                                          className="fa-stack-1x"
                                                          name="angle-up"
                                                        >
                                                          <FontAwesomeIcon
                                                            className="fa-stack-1x"
                                                            icon={
                                                              Object {
                                                                "iconName": "angle-up",
                                                                "prefix": "fas",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              className="svg-inline--fa fa-angle-up"
                                                            />
                                                          </FontAwesomeIcon>
                                                        </Icon>
                                                      </div>
                                                    </StyledComponent>
                                                  </ExpandableListItem__IconStack>
                                                </div>
                                              </StyledComponent>
                                            </ExpandableListItem__Toggle>
                                            <ExpandableListItem__HeaderWrap
                                              className="header"
                                            >
                                              <StyledComponent
                                                className="header"
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "ExpandableListItem__HeaderWrap-sc-10hsq3a-4",
                                                      "isStatic": false,
                                                      "lastClassName": "c8",
                                                      "rules": Array [
                                                        "font-size:14px;",
                                                      ],
                                                    },
                                                    "displayName": "ExpandableListItem__HeaderWrap",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "ExpandableListItem__HeaderWrap-sc-10hsq3a-4",
                                                    "target": "span",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <span
                                                  className="c8 header"
                                                >
                                                  <ExpandableListItem__Header
                                                    onClick={[Function]}
                                                    tabIndex={0}
                                                    type="button"
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "ExpandableListItem__Header-sc-10hsq3a-5",
                                                            "isStatic": false,
                                                            "lastClassName": "c9",
                                                            "rules": Array [
                                                              "border:0;padding:0;text-align:left;background:transparent;",
                                                            ],
                                                          },
                                                          "displayName": "ExpandableListItem__Header",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "ExpandableListItem__Header-sc-10hsq3a-5",
                                                          "target": "button",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      onClick={[Function]}
                                                      tabIndex={0}
                                                      type="button"
                                                    >
                                                      <button
                                                        className="c9"
                                                        onClick={[Function]}
                                                        tabIndex={0}
                                                        type="button"
                                                      >
                                                        Dashboard
                                                      </button>
                                                    </StyledComponent>
                                                  </ExpandableListItem__Header>
                                                </span>
                                              </StyledComponent>
                                            </ExpandableListItem__HeaderWrap>
                                          </div>
                                        </StyledComponent>
                                      </ExpandableListItem__Container>
                                      <ExpandableListItem__ExpandableContent>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "ExpandableListItem__ExpandableContent-sc-10hsq3a-7",
                                                "isStatic": false,
                                                "lastClassName": "c10",
                                                "rules": Array [
                                                  [Function],
                                                ],
                                              },
                                              "displayName": "ExpandableListItem__ExpandableContent",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "ExpandableListItem__ExpandableContent-sc-10hsq3a-7",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="c10"
                                          />
                                        </StyledComponent>
                                      </ExpandableListItem__ExpandableContent>
                                    </li>
                                  </StyledComponent>
                                </ExpandableListItem__ItemWrap>
                              </ExpandableListItem>
                            </ul>
                          </ExpandableList>
                        </div>
                      </Col>
                    </div>
                  </Row>
                </div>
              </ContentPackSelection>
            </div>
          </Col>
          <Col
            bsClass="col"
            componentClass="div"
            md={3}
          >
            <div
              className="col-md-3"
            >
              <AutoAffix
                viewportOffsetTop={65}
              >
                <div>
                  <div>
                    <ContentPackDetails
                      constraints={Array []}
                      contentPack={
                        Object {
                          "description": "## No one dares",
                          "entities": Array [
                            Object {
                              "constraints": Array [],
                              "data": Object {
                                "configuration": Object {
                                  "listen_address": "1.2.3.4",
                                  "port": "23",
                                },
                                "name": "Input",
                                "title": "A good input",
                              },
                              "id": "111-beef",
                              "type": "dashboard",
                              "v": "1.0",
                            },
                          ],
                          "id": "9950ba5a-0887-40a9-2b8f-8b50292cc7fb",
                          "name": "Content Pack the movie",
                          "parameters": Array [
                            Object {
                              "default_value": "23",
                              "name": "PORT",
                              "title": "Port",
                              "type": "integer",
                            },
                          ],
                          "rev": 1,
                          "summary": "A old content pack",
                          "url": "http://beinstein.com",
                          "v": 1,
                          "vendor": "Beinstein",
                        }
                      }
                      offset={1}
                      showConstraints={false}
                      verbose={false}
                    >
                      <Row
                        bsClass="row"
                        componentClass="div"
                      >
                        <div
                          className="row"
                        >
                          <Col
                            bsClass="col"
                            componentClass="div"
                            sm={9}
                            smOffset={1}
                          >
                            <div
                              className="col-sm-9 col-sm-offset-1"
                            >
                              <div
                                id="content-pack-details"
                              >
                                <h2>
                                  Details
                                </h2>
                                <br />
                                <div>
                                  <dl
                                    className="deflist"
                                  >
                                    <dt>
                                      Version:
                                    </dt>
                                     
                                    <dd>
                                      1
                                    </dd>
                                    <dt>
                                      Name:
                                    </dt>
                                     
                                    <dd>
                                      Content Pack the movie
                                       
                                    </dd>
                                    <dt>
                                      Summary:
                                    </dt>
                                     
                                    <dd>
                                      A old content pack
                                       
                                    </dd>
                                    <dt>
                                      Vendor:
                                    </dt>
                                     
                                    <dd>
                                      Beinstein
                                       
                                    </dd>
                                    <dt>
                                      URL:
                                    </dt>
                                     
                                    <dd>
                                      <a
                                        href="http://beinstein.com"
                                      >
                                        http://beinstein.com
                                      </a>
                                       
                                    </dd>
                                    <span>
                                      <dt>
                                        ID:
                                      </dt>
                                       
                                      <dd>
                                        <code>
                                          9950ba5a-0887-40a9-2b8f-8b50292cc7fb
                                        </code>
                                      </dd>
                                    </span>
                                    <span>
                                      <dt>
                                        Parameters:
                                      </dt>
                                       
                                      <dd>
                                        1
                                      </dd>
                                    </span>
                                    <span>
                                      <dt>
                                        Entities:
                                      </dt>
                                       
                                      <dd>
                                        1
                                      </dd>
                                    </span>
                                  </dl>
                                </div>
                                <div>
                                  <h2>
                                    Description
                                  </h2>
                                  <br />
                                  <Well>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "SIZES": Array [
                                            "large",
                                            "small",
                                          ],
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "Well-sc-19gs1oc-0",
                                            "isStatic": false,
                                            "lastClassName": "c11",
                                            "rules": Array [
                                              [Function],
                                            ],
                                          },
                                          "displayName": "Well",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "Well-sc-19gs1oc-0",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <Well
                                        bsClass="well"
                                        className="c11"
                                      >
                                        <div
                                          className="c11 well"
                                        >
                                          <div
                                            dangerouslySetInnerHTML={
                                              Object {
                                                "__html": "<h2>No one dares</h2>",
                                              }
                                            }
                                          />
                                        </div>
                                      </Well>
                                    </StyledComponent>
                                  </Well>
                                </div>
                                <br />
                                <br />
                                <br />
                              </div>
                            </div>
                          </Col>
                        </div>
                      </Row>
                    </ContentPackDetails>
                  </div>
                </div>
              </AutoAffix>
            </div>
          </Col>
        </div>
      </Row>
    </Wizard>
    <ScrollButton
      delay={5}
      possition="middle"
      scrollSteps={50}
    >
      <span />
    </ScrollButton>
  </div>
</ContentPackEdit>
`;
